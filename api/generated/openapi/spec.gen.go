// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWT4vkRBT/KsXTwwyGSXqm20NuM7hK40GZ1dMyNLXJ695akkq2qtI4NIHtaRYUGRQR",
	"xZsIu6uXBVnxD6x+mZhRv4VUVf+dVHpmlTnsKanUq9977/d7qfcmEGVpnnHkSkI4gZwKmqJCYVaFRNGP",
	"9VuMMhIsVyzjEJrvhMXgAdPLnKp74AGnKc43+3pP4IOCCYwhVKJAD2R0D1Oq0YaZSKmCEBhXb3bBA3Wa",
	"o13iCAWUZbkwN3EcJsmHch4TU5ial9cFDiGE1/xVBv78jK+toVziUiHoqV4f0fgYHxQo1S0hMmEyFlmO",
	"QjE0oEOGSXwV+tvayAKUHqQoJR1hk6VuEBDUVmRh4gF+RNM8sbmOacJismTc2q7IkEowPlpl0Qrvgh0s",
	"YZuAK16yu/cxUg5ijlHmGZfYJAgXvG0j6DLNTpdrLLplGNiCupz3gjhjQ4yNg7MRGyMfjGlSXAlhjRwY",
	"rcpunl+pew2i+1yh4DS5jWKMoiX9Vse9K0rKYhNpwF+2oHotBWVBBxZ00AJ6zVz/Z2G52HO6NhdAw4eT",
	"0/q3n/75/bv1nA86XvOKShlnaZFCGDSvKw9GyGPrcRP84uHT+uPHO52Q/PXlLxcPn3pkP6wfPzdvB+Gf",
	"v57//cPz3Q2+Oy7BmOMSrmZPqtmL6uznavai/9Y6hiv8Zsjuv6v+/Lz+5HwjIkVFdh3B9SfGh1kT9PjW",
	"7Q+GRUIO3+8TplFT5IqaTQ8UU8ZNjGlGaM7AgzEKaU8Ge8FeR0eb5cj1ZggHe8HeAXim6xhVfd1x/IRJ",
	"pVcjVI6sHn1fTZ9U02frpFXTZxezR/W3P1ZnX9SffVX/8XU1/aY6+xSMN2Hi090P3kG17EC6rdkSNr73",
	"g0A/oowr5MYxzfOEReawf19q75O1zretuJc+DJObCewHwc577+5qJnpbXeYiu5tg+sbLud72pzqi6QXB",
	"zuIIsWeIObRr64KOJIR3zCQg4UR/shpN7GxQtur0X+XRvB2dmqljfYK54856ZeLPh5Xy5AZ1tcPIVk27",
	"N6BpW0t3RNINgp0jGpO5/VLLV7LY9OhorGwBFCKBEPxxx4g8t75cd4dRhFISlZHFX742zEooT8p/AwAA",
	"///BWmDBKQsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
